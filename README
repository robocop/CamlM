Ceci est un intepreteur de mini-caml servant de base à différentes expérimentations.

Pour le lancer
--------------

1. Créer le dossier build/
2. Executer la commande : 
   $ /.makefile.sh

Exemple
-------

$ rlwrap ./caml
# let rec fac = function 0 -> 1 | n -> n*fac(n-1) in fac 5;;
120



let rec map = function f -> function
    [] -> []
  | x::xs -> (f x) :: (map f xs)
;;
map (function x -> x+3) (1::2::3::[]);;
(* 4::5::6::[]  *)

let rec fibo = function
    0 -> 1
  | 1 -> 1
  | n -> (fibo (n-1)) + fibo (n-2)
;;
fibo 7;;
(* 21 *)

let f = function x -> (x*x)+4;;
(* \x -> ((x * x) + 4) *)

let rec deriv = function
    Id -> \x -> 1
  | Const _ -> \x -> 0
  | f+g -> 
    let df = deriv f in let dg = deriv g in
    \x -> df x + dg x
  | f*g -> 
    let df = deriv f in let dg = deriv g in
    \x -> df x * g x + dg x * f x
;;

let rec simplify = function
   (Const a) + (Const b) -> let r = a+b in \x -> r
  | (Const a) * (Const b) -> let r = a*b in \x -> r
  | (Const 1) * g -> g
  | g * (Const 1) -> g
  | Id + Id -> \x -> 2*x
  | f + (Const 0) -> f
  | f+g -> 
    let f = simplify f in let g = simplify g in
    \x -> f x + g x
  | f*g -> 
    let sf = simplify f in let sg = simplify g in
    \x -> sf x * sg x
  | f -> f
;;

# deriv (\x -> 5*x*x+3*x+1);;
\x -> ((((((0 * x) + (1 * 5)) * x) + (1 * (5 * x))) + ((0 * x) + (1 * 3))) + 0)

