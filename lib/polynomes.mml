open List;;

let rec to_polynome = function
    (Const a) * Id^(Const (Num b)) -> [(a, b)]
  | Id^(Const (Num b)) -> [(1, b)]
  | Const a * Id -> [(a, 1)]
  | Id -> [(1, 1)]
  | Const a -> [(a, 0)]
  | f + g -> concat (to_polynome f) (to_polynome g)
;; 
let p = to_polynome (\x -> 0);;
p;;
let normalise p = 
  let p' = sort (\ (x, a) (y, b) -> a <= b) p in
  let rec simpl = function
      [] -> []
    | (a, n)::(b, m)::r when n == m -> (a+b, m)::simpl r
    | x::xs -> x:: simpl xs
  in
  simpl p'
;;

(* Effectue la somme de deux polynomes *)
let rec sum_p p1 p2 = match (p1, p2) with
    ([], p) -> p
  | (p, []) -> p
  | ((a, d1)::p1, (b, d2)::p2) when d1 == d2 -> (a+b, d2)::(sum_p p1 p2)
  | ((a, d1)::p1, (_, d2)::_) when d1 < d2 -> (a, d1)::(sum_p p1 p2)
  | (_, (b, d2)::p2) -> (b, d2) :: (sum_p p1 p2)
;; 

let rec mult_monome (a, d) p = match p with
    [] -> []
  | (a', d')::p' -> (a*a', d+d')::mult_monome (a, d) p'
;;

let rec prod_p p1 p2 = match p1 with
    [] -> []
  | (a, d)::p1' -> sum_p (mult_monome (a, d) p2) (prod_p p1' p2)
;;


let p = normalise (to_polynome (\x -> x+1));;
p_to_fun (prod_p (prod_p (prod_p (prod_p (prod_p p p) p) p) p) p);;
p_to_fun (prod_p (normalise (to_polynome (\x -> 5*x^2+2+1+x^3))) (normalise (to_polynome (\x -> 5*x+2+1+3*x^2)))) ;;

let to_monome = function
   (a, 0) -> \x -> a
  | (1, 1) -> \x -> x
  | (a, 1) -> \x -> a*x
  | (1, p) -> \x -> x^p
  | (a, p) -> \x -> a*x^p
;;
let rec p_to_fun = function
    [] -> \x -> 0
  | [e] -> to_monome e
  | x::xs -> let f = to_monome x in let g = p_to_fun xs in \x -> g x + f x
;;

p_to_fun (normalise p);;
